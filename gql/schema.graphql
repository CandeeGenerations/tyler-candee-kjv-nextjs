# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Author | AuthorAggregator | AuthorConnection | AuthorConnectionAvatar | AuthorConnectionBio | AuthorConnectionCreatedAt | AuthorConnectionFeatured | AuthorConnectionId | AuthorConnectionName | AuthorConnectionPublished_at | AuthorConnectionSlug | AuthorConnectionSocial | AuthorConnectionUpdatedAt | AuthorConnection_id | AuthorGroupBy | Comment | CommentAggregator | CommentConnection | CommentConnectionApproved | CommentConnectionCreatedAt | CommentConnectionDate | CommentConnectionId | CommentConnectionName | CommentConnectionPost | CommentConnectionReference_comment | CommentConnectionText | CommentConnectionUpdatedAt | CommentConnection_id | CommentGroupBy | ComponentMetadataSocialNetworks | Post | PostAggregator | PostConnection | PostConnectionAuthor | PostConnectionBody | PostConnectionCreatedAt | PostConnectionDate | PostConnectionExcerpt | PostConnectionHero | PostConnectionId | PostConnectionPublished_at | PostConnectionSecret | PostConnectionSlug | PostConnectionTitle | PostConnectionUpdatedAt | PostConnection_id | PostGroupBy | Resource | ResourceAggregator | ResourceConnection | ResourceConnectionCreatedAt | ResourceConnectionDescription | ResourceConnectionId | ResourceConnectionLink | ResourceConnectionPublished_at | ResourceConnectionTitle | ResourceConnectionUpdatedAt | ResourceConnection_id | ResourceGroupBy | Salvation | Sermon | SermonAggregator | SermonConnection | SermonConnectionCode | SermonConnectionCreatedAt | SermonConnectionDate | SermonConnectionHero | SermonConnectionId | SermonConnectionPublished_at | SermonConnectionTitle | SermonConnectionType | SermonConnectionUpdatedAt | SermonConnection_id | SermonGroupBy | SlugResponse | Tag | TagAggregator | TagAggregatorAvg | TagAggregatorMax | TagAggregatorMin | TagAggregatorSum | TagConnection | TagConnectionCreatedAt | TagConnectionFeatured | TagConnectionId | TagConnectionOrder | TagConnectionPublished_at | TagConnectionSlug | TagConnectionTag | TagConnectionUpdatedAt | TagConnection_id | TagGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createAuthorPayload | createCommentPayload | createPostPayload | createResourcePayload | createRolePayload | createSermonPayload | createTagPayload | createUserPayload | deleteAuthorPayload | deleteCommentPayload | deleteFilePayload | deletePostPayload | deleteResourcePayload | deleteRolePayload | deleteSalvationPayload | deleteSermonPayload | deleteTagPayload | deleteUserPayload | updateAuthorPayload | updateCommentPayload | updatePostPayload | updateResourcePayload | updateRolePayload | updateSalvationPayload | updateSermonPayload | updateTagPayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Author {
    _id: ID!
    avatar: UploadFile
    bio: String
    createdAt: DateTime!
    featured: Boolean!
    id: ID!
    name: String!
    posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
    published_at: DateTime
    slug: String!
    social: ComponentMetadataSocialNetworks
    updatedAt: DateTime!
}

type AuthorAggregator {
    count: Int
    totalCount: Int
}

type AuthorConnection {
    aggregate: AuthorAggregator
    groupBy: AuthorGroupBy
    values: [Author]
}

type AuthorConnectionAvatar {
    connection: AuthorConnection
    key: ID
}

type AuthorConnectionBio {
    connection: AuthorConnection
    key: String
}

type AuthorConnectionCreatedAt {
    connection: AuthorConnection
    key: DateTime
}

type AuthorConnectionFeatured {
    connection: AuthorConnection
    key: Boolean
}

type AuthorConnectionId {
    connection: AuthorConnection
    key: ID
}

type AuthorConnectionName {
    connection: AuthorConnection
    key: String
}

type AuthorConnectionPublished_at {
    connection: AuthorConnection
    key: DateTime
}

type AuthorConnectionSlug {
    connection: AuthorConnection
    key: String
}

type AuthorConnectionSocial {
    connection: AuthorConnection
    key: ID
}

type AuthorConnectionUpdatedAt {
    connection: AuthorConnection
    key: DateTime
}

type AuthorConnection_id {
    connection: AuthorConnection
    key: ID
}

type AuthorGroupBy {
    _id: [AuthorConnection_id]
    avatar: [AuthorConnectionAvatar]
    bio: [AuthorConnectionBio]
    createdAt: [AuthorConnectionCreatedAt]
    featured: [AuthorConnectionFeatured]
    id: [AuthorConnectionId]
    name: [AuthorConnectionName]
    published_at: [AuthorConnectionPublished_at]
    slug: [AuthorConnectionSlug]
    social: [AuthorConnectionSocial]
    updatedAt: [AuthorConnectionUpdatedAt]
}

type Comment {
    _id: ID!
    approved: Boolean!
    createdAt: DateTime!
    date: DateTime
    id: ID!
    name: String!
    post: Post
    reference_comment: Comment
    text: String!
    updatedAt: DateTime!
}

type CommentAggregator {
    count: Int
    totalCount: Int
}

type CommentConnection {
    aggregate: CommentAggregator
    groupBy: CommentGroupBy
    values: [Comment]
}

type CommentConnectionApproved {
    connection: CommentConnection
    key: Boolean
}

type CommentConnectionCreatedAt {
    connection: CommentConnection
    key: DateTime
}

type CommentConnectionDate {
    connection: CommentConnection
    key: DateTime
}

type CommentConnectionId {
    connection: CommentConnection
    key: ID
}

type CommentConnectionName {
    connection: CommentConnection
    key: String
}

type CommentConnectionPost {
    connection: CommentConnection
    key: ID
}

type CommentConnectionReference_comment {
    connection: CommentConnection
    key: ID
}

type CommentConnectionText {
    connection: CommentConnection
    key: String
}

type CommentConnectionUpdatedAt {
    connection: CommentConnection
    key: DateTime
}

type CommentConnection_id {
    connection: CommentConnection
    key: ID
}

type CommentGroupBy {
    _id: [CommentConnection_id]
    approved: [CommentConnectionApproved]
    createdAt: [CommentConnectionCreatedAt]
    date: [CommentConnectionDate]
    id: [CommentConnectionId]
    name: [CommentConnectionName]
    post: [CommentConnectionPost]
    reference_comment: [CommentConnectionReference_comment]
    text: [CommentConnectionText]
    updatedAt: [CommentConnectionUpdatedAt]
}

type ComponentMetadataSocialNetworks {
    _id: ID!
    facebook: String
    id: ID!
    instagram: String
    linkedin: String
    twitter: String
    youtube: String
}

type Mutation {
    createAuthor(input: createAuthorInput): createAuthorPayload
    createComment(input: createCommentInput): createCommentPayload
    createPost(input: createPostInput): createPostPayload
    createResource(input: createResourceInput): createResourcePayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    createSermon(input: createSermonInput): createSermonPayload
    createTag(input: createTagInput): createTagPayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
    deleteComment(input: deleteCommentInput): deleteCommentPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deletePost(input: deletePostInput): deletePostPayload
    deleteResource(input: deleteResourceInput): deleteResourcePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    deleteSalvation: deleteSalvationPayload
    deleteSermon(input: deleteSermonInput): deleteSermonPayload
    deleteTag(input: deleteTagInput): deleteTagPayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateAuthor(input: updateAuthorInput): updateAuthorPayload
    updateComment(input: updateCommentInput): updateCommentPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updatePost(input: updatePostInput): updatePostPayload
    updateResource(input: updateResourceInput): updateResourcePayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    updateSalvation(input: updateSalvationInput): updateSalvationPayload
    updateSermon(input: updateSermonInput): updateSermonPayload
    updateTag(input: updateTagInput): updateTagPayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Post {
    _id: ID!
    author: Author
    body: String!
    comments(limit: Int, sort: String, start: Int, where: JSON): [Comment]
    createdAt: DateTime!
    date: DateTime!
    excerpt: String!
    hero: UploadFile
    id: ID!
    published_at: DateTime
    secret: Boolean!
    slug: String!
    tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
    title: String!
    updatedAt: DateTime!
}

type PostAggregator {
    count: Int
    totalCount: Int
}

type PostConnection {
    aggregate: PostAggregator
    groupBy: PostGroupBy
    values: [Post]
}

type PostConnectionAuthor {
    connection: PostConnection
    key: ID
}

type PostConnectionBody {
    connection: PostConnection
    key: String
}

type PostConnectionCreatedAt {
    connection: PostConnection
    key: DateTime
}

type PostConnectionDate {
    connection: PostConnection
    key: DateTime
}

type PostConnectionExcerpt {
    connection: PostConnection
    key: String
}

type PostConnectionHero {
    connection: PostConnection
    key: ID
}

type PostConnectionId {
    connection: PostConnection
    key: ID
}

type PostConnectionPublished_at {
    connection: PostConnection
    key: DateTime
}

type PostConnectionSecret {
    connection: PostConnection
    key: Boolean
}

type PostConnectionSlug {
    connection: PostConnection
    key: String
}

type PostConnectionTitle {
    connection: PostConnection
    key: String
}

type PostConnectionUpdatedAt {
    connection: PostConnection
    key: DateTime
}

type PostConnection_id {
    connection: PostConnection
    key: ID
}

type PostGroupBy {
    _id: [PostConnection_id]
    author: [PostConnectionAuthor]
    body: [PostConnectionBody]
    createdAt: [PostConnectionCreatedAt]
    date: [PostConnectionDate]
    excerpt: [PostConnectionExcerpt]
    hero: [PostConnectionHero]
    id: [PostConnectionId]
    published_at: [PostConnectionPublished_at]
    secret: [PostConnectionSecret]
    slug: [PostConnectionSlug]
    title: [PostConnectionTitle]
    updatedAt: [PostConnectionUpdatedAt]
}

type Query {
    author(id: ID!, publicationState: PublicationState): Author
    authorSlugs(publicationState: PublicationState): [SlugResponse]
    authors(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Author]
    authorsConnection(limit: Int, sort: String, start: Int, where: JSON): AuthorConnection
    comment(id: ID!, publicationState: PublicationState): Comment
    comments(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Comment]
    commentsByPost(limit: Int, postId: ID!, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Comment]
    commentsConnection(limit: Int, sort: String, start: Int, where: JSON): CommentConnection
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    nextPosts(id: ID!): [Post]
    post(id: ID!, publicationState: PublicationState): Post
    posts(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Post]
    postsConnection(limit: Int, sort: String, start: Int, where: JSON): PostConnection
    postsCount(where: JSON): Int!
    resource(id: ID!, publicationState: PublicationState): Resource
    resourceCount: Int!
    resources(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Resource]
    resourcesConnection(limit: Int, sort: String, start: Int, where: JSON): ResourceConnection
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    salvation(publicationState: PublicationState): Salvation
    sermon(id: ID!, publicationState: PublicationState): Sermon
    sermons(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Sermon]
    sermonsConnection(limit: Int, sort: String, start: Int, where: JSON): SermonConnection
    sermonsCount(where: JSON): Int!
    tag(id: ID!, publicationState: PublicationState): Tag
    tagSlugs(sort: String): [SlugResponse]
    tags(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Tag]
    tagsConnection(limit: Int, sort: String, start: Int, where: JSON): TagConnection
    todaysPosts: [Post]
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Resource {
    _id: ID!
    createdAt: DateTime!
    description: String
    id: ID!
    link: String!
    published_at: DateTime
    title: String!
    updatedAt: DateTime!
}

type ResourceAggregator {
    count: Int
    totalCount: Int
}

type ResourceConnection {
    aggregate: ResourceAggregator
    groupBy: ResourceGroupBy
    values: [Resource]
}

type ResourceConnectionCreatedAt {
    connection: ResourceConnection
    key: DateTime
}

type ResourceConnectionDescription {
    connection: ResourceConnection
    key: String
}

type ResourceConnectionId {
    connection: ResourceConnection
    key: ID
}

type ResourceConnectionLink {
    connection: ResourceConnection
    key: String
}

type ResourceConnectionPublished_at {
    connection: ResourceConnection
    key: DateTime
}

type ResourceConnectionTitle {
    connection: ResourceConnection
    key: String
}

type ResourceConnectionUpdatedAt {
    connection: ResourceConnection
    key: DateTime
}

type ResourceConnection_id {
    connection: ResourceConnection
    key: ID
}

type ResourceGroupBy {
    _id: [ResourceConnection_id]
    createdAt: [ResourceConnectionCreatedAt]
    description: [ResourceConnectionDescription]
    id: [ResourceConnectionId]
    link: [ResourceConnectionLink]
    published_at: [ResourceConnectionPublished_at]
    title: [ResourceConnectionTitle]
    updatedAt: [ResourceConnectionUpdatedAt]
}

type Salvation {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    published_at: DateTime
    slug: String!
    text: String
    title: String!
    updatedAt: DateTime!
}

type Sermon {
    _id: ID!
    code: String!
    createdAt: DateTime!
    date: DateTime!
    hero: UploadFile
    id: ID!
    published_at: DateTime
    title: String!
    type: ENUM_SERMON_TYPE!
    updatedAt: DateTime!
}

type SermonAggregator {
    count: Int
    totalCount: Int
}

type SermonConnection {
    aggregate: SermonAggregator
    groupBy: SermonGroupBy
    values: [Sermon]
}

type SermonConnectionCode {
    connection: SermonConnection
    key: String
}

type SermonConnectionCreatedAt {
    connection: SermonConnection
    key: DateTime
}

type SermonConnectionDate {
    connection: SermonConnection
    key: DateTime
}

type SermonConnectionHero {
    connection: SermonConnection
    key: ID
}

type SermonConnectionId {
    connection: SermonConnection
    key: ID
}

type SermonConnectionPublished_at {
    connection: SermonConnection
    key: DateTime
}

type SermonConnectionTitle {
    connection: SermonConnection
    key: String
}

type SermonConnectionType {
    connection: SermonConnection
    key: String
}

type SermonConnectionUpdatedAt {
    connection: SermonConnection
    key: DateTime
}

type SermonConnection_id {
    connection: SermonConnection
    key: ID
}

type SermonGroupBy {
    _id: [SermonConnection_id]
    code: [SermonConnectionCode]
    createdAt: [SermonConnectionCreatedAt]
    date: [SermonConnectionDate]
    hero: [SermonConnectionHero]
    id: [SermonConnectionId]
    published_at: [SermonConnectionPublished_at]
    title: [SermonConnectionTitle]
    type: [SermonConnectionType]
    updatedAt: [SermonConnectionUpdatedAt]
}

type SlugResponse {
    featured: Boolean!
    id: ID!
    order: Int
    postCount: Int!
    slug: String!
    tag: String!
}

type Tag {
    _id: ID!
    createdAt: DateTime!
    featured: Boolean!
    id: ID!
    order: Int
    posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
    published_at: DateTime
    slug: String!
    tag: String!
    updatedAt: DateTime!
}

type TagAggregator {
    avg: TagAggregatorAvg
    count: Int
    max: TagAggregatorMax
    min: TagAggregatorMin
    sum: TagAggregatorSum
    totalCount: Int
}

type TagAggregatorAvg {
    order: Float
}

type TagAggregatorMax {
    order: Float
}

type TagAggregatorMin {
    order: Float
}

type TagAggregatorSum {
    order: Float
}

type TagConnection {
    aggregate: TagAggregator
    groupBy: TagGroupBy
    values: [Tag]
}

type TagConnectionCreatedAt {
    connection: TagConnection
    key: DateTime
}

type TagConnectionFeatured {
    connection: TagConnection
    key: Boolean
}

type TagConnectionId {
    connection: TagConnection
    key: ID
}

type TagConnectionOrder {
    connection: TagConnection
    key: Int
}

type TagConnectionPublished_at {
    connection: TagConnection
    key: DateTime
}

type TagConnectionSlug {
    connection: TagConnection
    key: String
}

type TagConnectionTag {
    connection: TagConnection
    key: String
}

type TagConnectionUpdatedAt {
    connection: TagConnection
    key: DateTime
}

type TagConnection_id {
    connection: TagConnection
    key: ID
}

type TagGroupBy {
    _id: [TagConnection_id]
    createdAt: [TagConnectionCreatedAt]
    featured: [TagConnectionFeatured]
    id: [TagConnectionId]
    order: [TagConnectionOrder]
    published_at: [TagConnectionPublished_at]
    slug: [TagConnectionSlug]
    tag: [TagConnectionTag]
    updatedAt: [TagConnectionUpdatedAt]
}

type UploadFile {
    _id: ID!
    alternativeText: String
    caption: String
    createdAt: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updatedAt: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnection_id {
    connection: UploadFileConnection
    key: ID
}

type UploadFileGroupBy {
    _id: [UploadFileConnection_id]
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    createdAt: [UploadFileConnectionCreatedAt]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updatedAt: [UploadFileConnectionUpdatedAt]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    _id: ID!
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    _id: ID!
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnection_id {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    _id: [UsersPermissionsRoleConnection_id]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    _id: ID!
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updatedAt: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnection_id {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserGroupBy {
    _id: [UsersPermissionsUserConnection_id]
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    createdAt: [UsersPermissionsUserConnectionCreatedAt]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
    username: [UsersPermissionsUserConnectionUsername]
}

type createAuthorPayload {
    author: Author
}

type createCommentPayload {
    comment: Comment
}

type createPostPayload {
    post: Post
}

type createResourcePayload {
    resource: Resource
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createSermonPayload {
    sermon: Sermon
}

type createTagPayload {
    tag: Tag
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteAuthorPayload {
    author: Author
}

type deleteCommentPayload {
    comment: Comment
}

type deleteFilePayload {
    file: UploadFile
}

type deletePostPayload {
    post: Post
}

type deleteResourcePayload {
    resource: Resource
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteSalvationPayload {
    salvation: Salvation
}

type deleteSermonPayload {
    sermon: Sermon
}

type deleteTagPayload {
    tag: Tag
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateAuthorPayload {
    author: Author
}

type updateCommentPayload {
    comment: Comment
}

type updatePostPayload {
    post: Post
}

type updateResourcePayload {
    resource: Resource
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateSalvationPayload {
    salvation: Salvation
}

type updateSermonPayload {
    sermon: Sermon
}

type updateTagPayload {
    tag: Tag
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum ENUM_SERMON_TYPE {
    Devotional
    Sermon
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Long` scalar type represents 52-bit integers"
scalar Long

"A time string with format: HH:mm:ss.SSS"
scalar Time

"The `Upload` scalar type represents a file upload."
scalar Upload

input AuthorInput {
    avatar: ID
    bio: String
    created_by: ID
    featured: Boolean
    name: String!
    posts: [ID]
    published_at: DateTime
    slug: String!
    social: ComponentMetadataSocialNetworkInput
    updated_by: ID
}

input CommentInput {
    approved: Boolean
    created_by: ID
    date: DateTime
    name: String!
    post: ID
    reference_comment: ID
    text: String!
    updated_by: ID
}

input ComponentMetadataSocialNetworkInput {
    facebook: String
    instagram: String
    linkedin: String
    twitter: String
    youtube: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input PostInput {
    author: ID
    body: String!
    comments: [ID]
    created_by: ID
    date: DateTime!
    excerpt: String!
    hero: ID
    published_at: DateTime
    secret: Boolean
    slug: String!
    tags: [ID]
    title: String!
    updated_by: ID
}

input ResourceInput {
    created_by: ID
    description: String
    link: String!
    published_at: DateTime
    title: String!
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input SalvationInput {
    created_by: ID
    published_at: DateTime
    slug: String!
    text: String
    title: String!
    updated_by: ID
}

input SermonInput {
    code: String!
    created_by: ID
    date: DateTime!
    hero: ID
    published_at: DateTime
    title: String!
    type: ENUM_SERMON_TYPE
    updated_by: ID
}

input TagInput {
    created_by: ID
    featured: Boolean
    order: Int
    posts: [ID]
    published_at: DateTime
    slug: String!
    tag: String!
    updated_by: ID
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createAuthorInput {
    data: AuthorInput
}

input createCommentInput {
    data: CommentInput
}

input createPostInput {
    data: PostInput
}

input createResourceInput {
    data: ResourceInput
}

input createRoleInput {
    data: RoleInput
}

input createSermonInput {
    data: SermonInput
}

input createTagInput {
    data: TagInput
}

input createUserInput {
    data: UserInput
}

input deleteAuthorInput {
    where: InputID
}

input deleteCommentInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deletePostInput {
    where: InputID
}

input deleteResourceInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteSermonInput {
    where: InputID
}

input deleteTagInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editAuthorInput {
    avatar: ID
    bio: String
    created_by: ID
    featured: Boolean
    name: String
    posts: [ID]
    published_at: DateTime
    slug: String
    social: editComponentMetadataSocialNetworkInput
    updated_by: ID
}

input editCommentInput {
    approved: Boolean
    created_by: ID
    date: DateTime
    name: String
    post: ID
    reference_comment: ID
    text: String
    updated_by: ID
}

input editComponentMetadataSocialNetworkInput {
    facebook: String
    id: ID
    instagram: String
    linkedin: String
    twitter: String
    youtube: String
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editPostInput {
    author: ID
    body: String
    comments: [ID]
    created_by: ID
    date: DateTime
    excerpt: String
    hero: ID
    published_at: DateTime
    secret: Boolean
    slug: String
    tags: [ID]
    title: String
    updated_by: ID
}

input editResourceInput {
    created_by: ID
    description: String
    link: String
    published_at: DateTime
    title: String
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editSalvationInput {
    created_by: ID
    published_at: DateTime
    slug: String
    text: String
    title: String
    updated_by: ID
}

input editSermonInput {
    code: String
    created_by: ID
    date: DateTime
    hero: ID
    published_at: DateTime
    title: String
    type: ENUM_SERMON_TYPE
    updated_by: ID
}

input editTagInput {
    created_by: ID
    featured: Boolean
    order: Int
    posts: [ID]
    published_at: DateTime
    slug: String
    tag: String
    updated_by: ID
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateAuthorInput {
    data: editAuthorInput
    where: InputID
}

input updateCommentInput {
    data: editCommentInput
    where: InputID
}

input updatePostInput {
    data: editPostInput
    where: InputID
}

input updateResourceInput {
    data: editResourceInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateSalvationInput {
    data: editSalvationInput
}

input updateSermonInput {
    data: editSermonInput
    where: InputID
}

input updateTagInput {
    data: editTagInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}
